import ApiBuilder from '../helpers/ApiBuilder';

const getCustomerInvoiceList = (companyKey, pageStart = 0, pageSize = 0) => {
  return ApiBuilder.API.get(`/api/biz/invoices/?expand=CurrencyCode&top=${pageSize}&skip=${pageStart}&orderby=ID desc`,
    { headers: { 'CompanyKey': companyKey } });
};

const createCustomerInvoice = (companyKey, invoice) => {
  return ApiBuilder.API.post('/api/biz/invoices/', invoice,
    { headers: { 'CompanyKey': companyKey } });
};

const editCustomerInvoiceDetails = (companyKey, invoiceID, invoice) => {
  return ApiBuilder.API.put(`/api/biz/invoices/${invoiceID}`, invoice,
    { headers: { 'CompanyKey': companyKey } });
};

const invoiceCustomerInvoiceDetails = (companyKey, invoiceID) => {
  return ApiBuilder.API.post(`/api/biz/invoices/${invoiceID}?action=invoice`, null,
    { headers: { 'CompanyKey': companyKey } });
};

const getCustomerInvoiceDetails = (companyKey, invoiceID) => {
  return ApiBuilder.API.get(`/api/biz/invoices/${invoiceID}?expand=Items,PaymentTerms,DeliveryTerms, currencycode, Items.CurrencyCode, Items.VatType, DefaultDimensions.Project, DefaultDimensions.Department, DefaultSeller`,
    { headers: { 'CompanyKey': companyKey } });
};

const deleteItem = (invoiceID, itemID, companyKey) => {
  const body = {
    ID: invoiceID,
    Items: [{ ID: itemID, Deleted: true }]
  };
  return ApiBuilder.API.put(`/api/biz/invoices/${invoiceID}`, body,
    { headers: { 'CompanyKey': companyKey } });
};

const addNewItem = (invoiceId, item, companyKey) => {
  const body = {
    ID: invoiceId,
    Items: [item]
  };
  return ApiBuilder.API.put(`/api/biz/invoices/${invoiceId}`, body,
    { headers: { 'CompanyKey': companyKey } });
};

const searchCustomersInvoices = (keyWord, companyKey, pageStart = 0, pageSize = 0, filterMap) => {
  const filterQuery = getSearchCustomerInvoiceQuery(filterMap.get('FilterName'), keyWord, pageStart, pageSize);
  return ApiBuilder.API.get(filterQuery,
    { headers: { 'CompanyKey': companyKey } });
};

const getSearchCustomerInvoiceQuery = (queryName, keyWord, pageStart, pageSize) => {
  if (keyWord === '') {
    if (queryName === 'all') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&filter=(CustomerInvoice.StatusCode ne '42001' )&hateoas=true&distinct=false`;
    }
    else if (queryName === 'mine') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&hateoas=true&distinct=false`;
    }
    else if (queryName === 'draft') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&filter=(CustomerInvoice.StatusCode eq '42001' or CustomerInvoice.InvoiceNumber eq 'null' )&hateoas=true&distinct=false`;
    }
    else if (queryName === 'invoiced') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&filter=(CustomerInvoice.StatusCode gt '42001' and CustomerInvoice.StatusCode lt '42004' and CustomerInvoice.InvoiceType ne '1' and add(TaxInclusiveAmount, CreditedAmount) ne '0' )&hateoas=true&distinct=false`;
    }
    else if (queryName === 'overdue') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=PaymentDueDate ASC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&filter=(CustomerInvoice.RestAmountCurrency ne '0' and CustomerInvoice.PaymentDueDate lt 'getdate()' and add(TaxInclusiveAmount, CreditedAmount) ne '0' ) and (CustomerInvoice.StatusCode eq '42002' or CustomerInvoice.StatusCode eq '42003' )&hateoas=true&distinct=false`;
    }
    else if (queryName === 'reminders') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&filter=(CustomerInvoice.CollectorStatusCode eq '42501' and add(TaxInclusiveAmount, CreditedAmount) ne '0' )&hateoas=true&distinct=false`;
    }
    else if (queryName === 'sendToDebtCollection') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&filter=(CustomerInvoice.CollectorStatusCode eq '42502' )&hateoas=true&distinct=false`;
    }
    else if (queryName === 'paid') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&filter=(CustomerInvoice.StatusCode eq '42004' and add(TaxInclusiveAmount, CreditedAmount) ne '0' )&hateoas=true&distinct=false`;
    }
    else if (queryName === 'credited') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&filter=(add(TaxInclusiveAmount, CreditedAmount) eq '0' or CustomerInvoice.InvoiceType eq '1' ) and (CustomerInvoice.StatusCode ne '42001' )&hateoas=true&distinct=false`;
    }
  }
  else {
    if (queryName === 'all') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&filter=(startswith(CustomerInvoice.InvoiceNumber,'${keyWord}') or startswith(Customer.CustomerNumber,'${keyWord}') or contains(Info.Name,'${keyWord}') ) and ((CustomerInvoice.StatusCode ne '42001' ) )&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&hateoas=true&distinct=false`;
    }
    else if (queryName === 'mine') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&filter=startswith(CustomerInvoice.InvoiceNumber,'${keyWord}') or startswith(Customer.CustomerNumber,'${keyWord}') or contains(Info.Name,'${keyWord}')&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&hateoas=true&distinct=false`;
    }
    else if (queryName === 'draft') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&filter=(startswith(CustomerInvoice.InvoiceNumber,'${keyWord}') or startswith(Customer.CustomerNumber,'${keyWord}') or contains(Info.Name,'${keyWord}') ) and ((CustomerInvoice.StatusCode eq '42001' or CustomerInvoice.InvoiceNumber eq 'null' ) )&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&hateoas=true&distinct=false`;
    }
    else if (queryName === 'invoiced') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&filter=(startswith(CustomerInvoice.InvoiceNumber,'${keyWord}') or startswith(Customer.CustomerNumber,'${keyWord}') or contains(Info.Name,'${keyWord}') ) and ((CustomerInvoice.StatusCode gt '42001' and CustomerInvoice.StatusCode lt '42004' and CustomerInvoice.InvoiceType ne '1' and add(TaxInclusiveAmount, CreditedAmount) ne '0' ) )&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CurrencyCode.Code as CurrencyCode,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&hateoas=true&distinct=false`;
    }
    else if (queryName === 'overdue') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&filter=(startswith(CustomerInvoice.InvoiceNumber,'${keyWord}') or startswith(Customer.CustomerNumber,'${keyWord}') or contains(Info.Name,'${keyWord}') ) and ((CustomerInvoice.RestAmountCurrency ne '0' and CustomerInvoice.PaymentDueDate lt 'getdate()' and add(TaxInclusiveAmount, CreditedAmount) ne '0' ) and (CustomerInvoice.StatusCode eq '42002' or CustomerInvoice.StatusCode eq '42003' ) )&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CurrencyCode.Code as CurrencyCode,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=PaymentDueDate ASC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&hateoas=true&distinct=false`;
    }
    else if (queryName === 'reminders') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&filter=(startswith(CustomerInvoice.InvoiceNumber,'${keyWord}') or startswith(Customer.CustomerNumber,'${keyWord}') or contains(Info.Name,'${keyWord}') ) and ((CustomerInvoice.CollectorStatusCode eq '42501' and add(TaxInclusiveAmount, CreditedAmount) ne '0' ) )&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&hateoas=true&distinct=false`;
    }
    else if (queryName === 'sendToDebtCollection') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&filter=(startswith(CustomerInvoice.InvoiceNumber,'${keyWord}') or startswith(Customer.CustomerNumber,'${keyWord}') or contains(Info.Name,'${keyWord}') ) and ((CustomerInvoice.CollectorStatusCode eq '42502' ) )&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&hateoas=true&distinct=false`;
    }
    else if (queryName === 'paid') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&filter=(startswith(CustomerInvoice.InvoiceNumber,'${keyWord}') or startswith(Customer.CustomerNumber,'${keyWord}') or contains(Info.Name,'${keyWord}') ) and ((CustomerInvoice.StatusCode eq '42004' and add(TaxInclusiveAmount, CreditedAmount) ne '0' ) )&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&hateoas=true&distinct=false`;
    }
    else if (queryName === 'credited') {
      return `/api/statistics?skip=${pageStart}&top=${pageSize}&filter=(startswith(CustomerInvoice.InvoiceNumber,'${keyWord}') or startswith(Customer.CustomerNumber,'${keyWord}') or contains(Info.Name,'${keyWord}') ) and ((add(TaxInclusiveAmount, CreditedAmount) eq '0' or CustomerInvoice.InvoiceType eq '1' ) and (CustomerInvoice.StatusCode ne '42001' ) )&model=CustomerInvoice&select=CustomerInvoice.InvoiceNumber as InvoiceNumber,Customer.CustomerNumber as CustomerCustomerNumber,Info.Name as InfoName,CustomerInvoice.InvoiceDate as CustomerInvoiceInvoiceDate,CustomerInvoice.PaymentDueDate as CustomerInvoicePaymentDueDate,CustomerInvoice.OurReference as CustomerInvoiceOurReference,CustomerInvoice.TaxExclusiveAmountCurrency as CustomerInvoiceTaxExclusiveAmountCurrency,CustomerInvoice.TaxInclusiveAmountCurrency as CustomerInvoiceTaxInclusiveAmountCurrency,CurrencyCode.Code as CurrencyCode,CustomerInvoice.InvoiceType as CustomerInvoiceInvoiceType,DefaultSeller.Name as DefaultSellerName,CustomerInvoice.CollectorStatusCode as CustomerInvoiceCollectorStatusCode,CustomerInvoice.StatusCode as CustomerInvoiceStatusCode,sum(casewhen(isnull(Sharing.EntityType,'') eq 'CustomerInvoice',1,0)) as SharingInvoiceCount,ID as ID,Customer.ID as CustomerID,InvoiceReferenceID as InvoiceReferenceID&orderby=ID DESC&expand=Customer,CurrencyCode,Customer.Info,DefaultSeller&join=CustomerInvoice.ID eq Sharing.EntityID&hateoas=true&distinct=false`;
    }
  }
}

const triggerInvoiceDistribution = (companyKey, invoiceID) => {
  return ApiBuilder.API.put(`/api/biz/distributions?action=distribute&id=${invoiceID}&entityType=Models.Sales.CustomerInvoice`, null,
    { headers: { 'CompanyKey': companyKey } });
};


const getDistributions = (companyKey, invoiceID) => {
  return ApiBuilder.API.get(`/api/statistics?model=Sharing&filter=EntityType eq 'CustomerInvoice' and EntityID eq ${invoiceID} &select=ID,Type,StatusCode,ExternalMessage,UpdatedAt,CreatedAt,To,user.DisplayName as UserDisplayName&join=sharing.createdBy eq user.GlobalIdentity&orderby=ID desc`,
    { headers: { 'CompanyKey': companyKey } });
};


export default {
  getCustomerInvoiceList,
  createCustomerInvoice,
  editCustomerInvoiceDetails,
  getCustomerInvoiceDetails,
  deleteItem,
  addNewItem,
  invoiceCustomerInvoiceDetails,
  searchCustomersInvoices,
  triggerInvoiceDistribution,
  getDistributions
};
